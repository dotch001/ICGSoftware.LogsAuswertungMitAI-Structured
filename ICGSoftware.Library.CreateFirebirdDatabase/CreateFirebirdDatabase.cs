using FirebirdSql.Data.FirebirdClient;
using ICGSoftware.GetAppSettings;
using Microsoft.Extensions.Options;
using Newtonsoft.Json.Linq;

namespace ICGSoftware.CreateFirebirdDatabase
{
    public class CreateFirebirdDatabase(IOptions<AppSettingsClassDev> settings, IOptions<AppSettingsClassConf> confidential, Logging.Logging loggingClass)
    {
        private readonly AppSettingsClassDev settings = settings.Value;
        private readonly AppSettingsClassConf confidential = confidential.Value;
        private readonly Logging.Logging _LoggingClass = loggingClass;

        public void CreateDatabase(string outputFile)
        {
            try
            {
                _LoggingClass.LoggerFunction("info", "outputFileInFirebirdCreateDatabase: " + outputFile);

                if (!Directory.Exists(settings.outputFolderPath + "\\DBFolder")) { Directory.CreateDirectory(settings.outputFolderPath + "\\DBFolder"); }

                string outputFileForDB = settings.outputFolderPath + $"\\DBFolder\\{settings.DBDatabase}";
                string connectionString = $"Database={outputFileForDB};DataSource={settings.DBDataSource};User={settings.DBUser};Password={confidential.DBPassword};Charset=UTF8;Dialect=3;Port={settings.DBPort}";

                // Create DB if it doesn't exist
                if (!File.Exists(outputFileForDB))
                {
                    FbConnection.CreateDatabase(connectionString, pageSize: 4096, forcedWrites: true);
                    _LoggingClass.LoggerFunction("info", "Database created at: " + outputFileForDB);
                }

                // Generate unique table names with timestamp
                string suffix = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                string errorsTable = $"Errors_{suffix}";
                string timestampsTable = $"ErrorTimestamps_{suffix}";

                // Read JSON content
                string jsonContent = File.ReadAllText(outputFile);
                var objects = new List<JObject>();
                var parts = jsonContent.Split(new[] { "}\n{" }, StringSplitOptions.None);
                foreach (var part in parts)
                {
                    string fixedJson = part;
                    if (!fixedJson.StartsWith("{")) fixedJson = "{" + fixedJson;
                    if (!fixedJson.EndsWith("}")) fixedJson += "}";
                    objects.Add(JObject.Parse(fixedJson));
                }

                using (var con = new FbConnection(connectionString))
                {
                    con.Open();

                    // Always create new tables with unique names
                    ExecuteNonQuery(con, $@"
                CREATE TABLE {errorsTable} (
                    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    ErrorText VARCHAR(512),
                    Occurrences VARCHAR(50)
                );
            ");

                    ExecuteNonQuery(con, $@"
                CREATE TABLE {timestampsTable} (
                    ErrorID INTEGER,
                    ""Timestamp"" TIMESTAMP,
                    FOREIGN KEY (ErrorID) REFERENCES {errorsTable}(ID)
                );
            ");

                    // Insert data
                    foreach (var obj in objects)
                    {
                        foreach (var prop in obj.Properties())
                        {
                            string errorText = prop.Name;
                            var details = prop.Value;
                            string occurred = details["Aufgetreten"]?.ToString();
                            var timestamps = details["Timestamps"]?.ToObject<List<string>>() ?? new List<string>();

                            // Insert into Errors_YYYYMMDD_HHmmss
                            long errorId;
                            using (var cmd = new FbCommand($"INSERT INTO {errorsTable} (ErrorText, Occurrences) VALUES (@text, @occ) RETURNING ID", con))
                            {
                                cmd.Parameters.AddWithValue("@text", errorText);
                                cmd.Parameters.AddWithValue("@occ", occurred);
                                errorId = Convert.ToInt64(cmd.ExecuteScalar());
                            }

                            // Insert timestamps
                            foreach (var ts in timestamps)
                            {
                                var cleanTs = ts.Split('+')[0]; // remove timezone
                                if (DateTime.TryParse(cleanTs, out DateTime dt))
                                {
                                    using (var tsCmd = new FbCommand($"INSERT INTO {timestampsTable} (ErrorID, \"Timestamp\") VALUES (@id, @ts)", con))
                                    {
                                        tsCmd.Parameters.AddWithValue("@id", errorId);
                                        tsCmd.Parameters.AddWithValue("@ts", dt);
                                        tsCmd.ExecuteNonQuery();
                                    }
                                }
                            }
                        }
                    }

                    Console.WriteLine($"Import completed. Tables created: {errorsTable}, {timestampsTable}");
                }
            }
            catch (Exception ex)
            {
                _LoggingClass.LoggerFunction("Error", "Error creating Firebird database: " + ex.Message);
                throw;
            }
        }


        private static void ExecuteNonQuery(FbConnection con, string sql)
        {
            using (var cmd = new FbCommand(sql, con))
            {
                cmd.ExecuteNonQuery();
            }
        }
    }
}
