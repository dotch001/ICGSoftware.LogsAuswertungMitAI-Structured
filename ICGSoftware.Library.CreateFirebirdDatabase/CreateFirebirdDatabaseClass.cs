using FirebirdSql.Data.FirebirdClient;
using ICGSoftware.Library.GetAppSettings;
using ICGSoftware.Library.Logging;
using Microsoft.Extensions.Options;
using System.Text.Json;

namespace ICGSoftware.Library.CreateFirebirdDatabase
{
    public class CreateFirebirdDatabaseClass
    {
        private readonly AppSettingsClassDev _settings;
        private readonly AppSettingsClassConf _confidential;
        private readonly LoggingClass _LoggingClass;

        public CreateFirebirdDatabaseClass(IOptions<AppSettingsClassDev> settings, IOptions<AppSettingsClassConf> confidential, LoggingClass loggingClass)
        {
            _settings = settings.Value;
            _confidential = confidential.Value;
            _LoggingClass = loggingClass;
        }

        public void CreateDatabase(string outputFile)
        {
            // Check if database file exists, create if not
            if (!File.Exists(_settings.outputFolderForDB))
            {
                // Use client-server mode (serverType=0 or omit)
                FbConnection.CreateDatabase(
                    connectionString: $"database=localhost:{_settings.outputFolderForDB};user={_settings.DBUser};password={_confidential.DBPassword};serverType=0;",
                    pageSize: 4096,
                    forcedWrites: true
                );
                _LoggingClass.LoggerFunction("info", "Database created successfully at " + _settings.outputFolderForDB);
            }
            else
            {
                _LoggingClass.LoggerFunction("info", "Database already exists at " + _settings.outputFolderForDB);
            }

            CreateTable(outputFile);
        }

        public void CreateTable(string outputFile)
        {
            using (var con = new FbConnection($"database=localhost:{_settings.outputFolderForDB};user={_settings.DBUser};password={_confidential.DBPassword};serverType=0;"))
            {
                con.Open();

                string createErrors = @"
                    CREATE TABLE Errors (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        Message VARCHAR(1024),
                        Occurred INTEGER
                    );";

                string createTimestamps = @"
                    CREATE TABLE Timestamps (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        ErrorID INTEGER,
                        TimeStampValue VARCHAR(50),
                        FOREIGN KEY (ErrorID) REFERENCES Errors(ID)
                    );";

                using (var cmd = new FbCommand(createErrors, con)) cmd.ExecuteNonQuery();
                using (var cmd = new FbCommand(createTimestamps, con)) cmd.ExecuteNonQuery();
            }

            InsertError(outputFile);
        }

        public void InsertError(string outputFile)
        {
            string jsonContent = File.ReadAllText(outputFile);
            jsonContent = "[" + jsonContent.Replace("}\n{", "},\n{") + "]"; // Convert multiple JSON objects into an array

            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var logs = JsonSerializer.Deserialize<List<Dictionary<string, JsonElement>>>(jsonContent, options);

            using (var con = new FbConnection($"database=localhost:{_settings.outputFolderForDB};user={_settings.DBUser};password={_confidential.DBPassword};serverType=0;"))
            {
                con.Open();

                foreach (var log in logs)
                {
                    foreach (var kv in log)
                    {
                        string message = kv.Key;
                        int count = int.Parse(kv.Value.GetProperty("Aufgetreten").ToString().Split(" ")[0]);

                        // Insert into Errors
                        int errorId;
                        using (var cmd = new FbCommand("INSERT INTO Errors (Message, Occurred) VALUES (@msg, @cnt) RETURNING ID", con))
                        {
                            cmd.Parameters.AddWithValue("msg", message);
                            cmd.Parameters.AddWithValue("cnt", count);
                            errorId = Convert.ToInt32(cmd.ExecuteScalar());
                        }

                        // Insert timestamps
                        foreach (var ts in kv.Value.GetProperty("Timestamps").EnumerateArray())
                        {
                            using (var cmd = new FbCommand("INSERT INTO Timestamps (ErrorID, TimeStampValue) VALUES (@eid, @ts)", con))
                            {
                                cmd.Parameters.AddWithValue("eid", errorId);
                                cmd.Parameters.AddWithValue("ts", ts.GetString());
                                cmd.ExecuteNonQuery();
                            }
                        }
                    }
                }
            }
        }
    }
}
