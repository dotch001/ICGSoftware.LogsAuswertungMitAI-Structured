using FirebirdSql.Data.FirebirdClient;
using ICGSoftware.Library.CreateFirebirdDatabase;
using ICGSoftware.Library.Logging;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;
using System.Text.Json;

namespace ICGSoftware.Library.CreateFirebirdDatabase
{
    public class CreateFirebirdDatabaseClass(IOptions<AppSettingsClassDev> settings, IOptions<AppSettingsClassConf> confidential)
    {
        private readonly AppSettingsClassDev _settings = settings.Value;
        private readonly AppSettingsClassConf _confidential = confidential.Value;


        public void CreateDatabase(LoggingClass loggingClass, string outputFile)
        {
            if (!File.Exists(_settings.outputFolderForDB))
            {
                FbConnection.CreateDatabase(
                    connectionString: $"database={_settings.outputFolderForDB};user={_settings.DBUser};password={_confidential.DBPassword};serverType=1;",
                    pageSize: 4096,
                    forcedWrites: true
                );
                loggingClass.LoggerFunction("info", "Database created successfully at " + _settings.outputFolderForDB);
            }
            else { loggingClass.LoggerFunction("info", "Database already exists at " + _settings.outputFolderForDB); }
            CreateTable(outputFile);
        }

        public void CreateTable(string outputFile)
        {
            using (var con = new FbConnection($"database={_settings.outputFolderForDB};database={_settings.outputFolderForDB};user={_settings.DBUser};password={_confidential.DBPassword};serverType=1;"))
            {
                con.Open();
                string createErrors = @"
        CREATE TABLE Errors (
            ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            Message VARCHAR(1024),
            Occurred INTEGER
        );";

                string createTimestamps = @"
        CREATE TABLE Timestamps (
            ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            ErrorID INTEGER,
            TimeStampValue VARCHAR(50),
            FOREIGN KEY (ErrorID) REFERENCES Errors(ID)
        );";

                using (var cmd = new FbCommand(createErrors, con)) cmd.ExecuteNonQuery();
                using (var cmd = new FbCommand(createTimestamps, con)) cmd.ExecuteNonQuery();
            }
            InsertError(outputFile);
        }
        public void InsertError(string outputFile)
        {
            string jsonContent = File.ReadAllText(outputFile);
            jsonContent = "[" + jsonContent.Replace("}\n{", "},\n{") + "]"; // Convert multiple JSON objects into an array

            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var logs = JsonSerializer.Deserialize<List<Dictionary<string, JsonElement>>>(jsonContent, options);

            using (var con = new FbConnection($"database={_settings.outputFolderForDB};database={_settings.outputFolderForDB};user={_settings.DBUser};password={_confidential.DBPassword};serverType=1;"))
            {
                con.Open();

                foreach (var log in logs)
                {
                    foreach (var kv in log)
                    {
                        string message = kv.Key;
                        int count = int.Parse(kv.Value.GetProperty("Aufgetreten").ToString().Split(" ")[0]);

                        // Insert into Errors
                        int errorId;
                        using (var cmd = new FbCommand("INSERT INTO Errors (Message, Occurred) VALUES (@msg, @cnt) RETURNING ID", con))
                        {
                            cmd.Parameters.AddWithValue("msg", message);
                            cmd.Parameters.AddWithValue("cnt", count);
                            errorId = Convert.ToInt32(cmd.ExecuteScalar());
                        }

                        // Insert timestamps
                        foreach (var ts in kv.Value.GetProperty("Timestamps").EnumerateArray())
                        {
                            using (var cmd = new FbCommand("INSERT INTO Timestamps (ErrorID, TimeStampValue) VALUES (@eid, @ts)", con))
                            {
                                cmd.Parameters.AddWithValue("eid", errorId);
                                cmd.Parameters.AddWithValue("ts", ts.GetString());
                                cmd.ExecuteNonQuery();
                            }
                        }
                    }
                }
            }
        }
    }
}
